#!/usr/bin/bash
#
# brightness [+-*/t][f.f]
#
# shellcheck disable=SC2155 # declare and assign together

set -f
dBase=$(basename "${BASH_SOURCE[0]}")
dDir=$(dirname "${BASH_SOURCE[0]}")
dNoteIcon="$dDir/$dBase.jpg" # notification image

Error() { # [CODE] ERROR DETAILS...
   local zCode
   if [[ "$1" =~ [0-9]+ ]]; then
      zCode="$1"
      shift
   fi
   Note ! critical "$(printf '%s\n' "${1:-Error}" "${@:2}")"
   [[ 0 -ne "${zCode:-0}" ]] && exit "$zCode"
}

Note() { # DIRECTION URGENCY MESSAGE
   # notify-send the replaceable volume notification
   local zRep
   [[ 1 -eq "${#1}" ]] \
      && zRep="$1$1$1" \
         || zRep="$1"
   notify-send --app-name="${dBase:-$0}" \
               --category="$dBase" \
               --expire-time=1600 \
               --icon="$dNoteIcon" \
               --replace-id=250 \
               --urgency="${2:-normal}" \
               -- "$zRep $dBase $zRep" "$3" # might take a lone time
}

NoteContent() {
   local zBrightness=$(Brightness)
   printf '<b>%s</b> = <b>%s</b>\n' \
          "$MONITOR" \
          "$(bc <<< "100 * $zBrightness / 1")%"
}

NoteNoLock() { # DIRECTION
   # post notification without deadlock caused by fast notifications
   local zId=$(pgrep "$dBase")
   if [[ -z "$zId" ]]; then # test for launched via openbox
      zSelf=$(realpath "${BASH_SOURCE[0]}")
      zId=$(pgrep -f "bash $zSelf") # -f does not want argument quotes
   fi
   # code 1 if notification is not attempted by this process
   [[ -z "$zId" ]] \
      || [[ $$ = "$zId" ]] \
      || return # let other process do this -- see loop below
   pgrep -f "$0" > /dev/null || return
   local zNewMessage=$(NoteContent)
   local zOldMessage=
   while [[ "$zNewMessage" != "$zOldMessage" ]]; do
      Note "$1" "normal" "$zNewMessage"
      zOldMessage="$zNewMessage"
      zNewMessage=$(NoteContent)
   done
   true
}

MONITOR="$(xrandr --listactivemonitors | sed -n '/[*+]/p')"
MONITOR="${MONITOR##* }"

Brightness() {
   xrandr --verbose \
      | sed -nE "/^$MONITOR/ba;d
:a;s|[[:space:]]*Brightness:[[:space:]]*||p;tb;n;ba
:b;q"
}

BrightnessDelta() { # DIRECTION [MULTIPLIER]
   local zOld=$(Brightness)
   case "$1" in
      \+|-) bc -l <<< "$zOld $1 (l(($zOld * 100) + 1.1) / 90 * ${2:-1})" ;;
      \*|/) bc -l <<< "$zOld $1 ${2:-1}" ;;
      t)
         local zIsMax=$(bc -l <<< "$zOld == ${2:-1}")
         [[ "$zIsMax" -eq 0 ]] \
            && echo "${2:-1}" \
               || echo "0"
         ;;
      *) echo "$2"
   esac
}

SetBrightness() { # [+-*\][MULTIPLIER]|SET
   [[ "$1" =~ ^([-+*/t])?([0-9]+\.?[0-9]*|\.[0-9]+)?$ ]] \
      || { >&2 printf '%s%s\n' \
               "!!! USAGE: $(basename "${BASH_SOURCE[0]}")" \
               '^([-+*/]?)(FLOAT)?$';
           exit; }
   local zOperation=${BASH_REMATCH[1]} # ^([-+*/t])?
   local zMultiplier=${BASH_REMATCH[2]}; # FLOAT
   local zValue=$(BrightnessDelta "$zOperation" "$zMultiplier")
   [[ -z "$zValue" ]] \
      || xrandr --output "$MONITOR" --brightness "$zValue"
   NoteNoLock "$zOperation"
}

SetBrightness "$@"
